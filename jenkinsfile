targets = ['SELECT ONE...', 'Staging']
pipeline {
	agent any
	
	options {
		buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '20')
	}
	
	parameters({
		string(name: 'SITE_URL', defaultValue: 'git@github.ibm.com:ICP4APPs/code-conjuring.git', description: 'Git ssh url to clone for the site repository')
		string(name: 'SITE_GIT_REVISION', defaultValue: 'master', description: 'Branch to clone for the site repository')
		
		credentials(name: 'IBM_CLOUD_CREDENTIALS', credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', defaultValue: '', description: 'IBM Cloud credentials to login via cf cli', required: true)
		
//		string(name: 'DOCS_GIT_URL', defaultValue: 'git@github.ibm.com:ICP4APPs/docs.git', description: 'Git ssh url to clone for the docs repository')
//		string(name: 'DOCS_GIT_REVISION', defaultValue: 'master', description: 'Branch to clone for the docs repository')
//		
//		string(name: 'BLOGS_GIT_URL', defaultValue: 'git@github.ibm.com:ICP4APPs/blogs.git', description: 'Git ssh url to clone for the blogs repository')
//		string(name: 'BLOGS_GIT_REVISION', defaultValue: 'master', description: 'Branch to clone for the docs repository')

		booleanParam(name: 'REBUILD_DOCKER_IMAGE', defaultValue: false, description: 'Rebuild the dockerfile.deploy docker image')
	})

	stages {
		stage ('Clean Workspace') {
			steps {
				cleanWs()
			}
		}
		
		stage ('Checkout site Repository') {
			steps {
 				checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${SITE_GIT_REVISION}"]],
					doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory']],
					submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'd07dc7e8-4db5-4f8b-bc86-cab254d2858a', url: "${SITE_GIT_URL}"]]]
			}
		}
		
//		stage ('Checkout Docs Repository') {
//			steps {
// 				checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${DOCS_GIT_REVISION}"]],
//					doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'docs']],
//					submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'd07dc7e8-4db5-4f8b-bc86-cab254d2858a', url: "${DOCS_GIT_URL}"]]]
//			}
//		}
//		
//		stage ('Checkout Blogs Repository') {
//			steps {
// 				checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${BLOGS_GIT_REVISION}"]],
//					doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'blogs']],
//					submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'd07dc7e8-4db5-4f8b-bc86-cab254d2858a', url: "${BLOGS_GIT_URL}"]]]
//			}
//		}

        stage ('Rebuild Docker Image') {
            when {
                expression {
                    return params.REBUILD_DOCKER_IMAGE
                }
            }
            steps {
                script {
                    sh 'docker build -f "${WORKSPACE}/dockerfile.deploy" -t codeconjuring'
                }
            }
        }

		stage ('Build Site') {
			steps {
				// Portal user
				withCredentials([usernamePassword(credentialsId: '${IBM_CLOUD_CREDENTIALS}', passwordVariable: 'IBM_CLOUD_PASSWORD', usernameVariable: 'IBM_CLOUD_USERNAME')]) {
					withDockerContainer(image: 'codeconjuring') {
						sh '''
						"${WORKSPACE}/scripts/build_jekyll_maven.sh
						'''
					}
				}
			}
		}
	}
    
	post {
		always {
			archiveArtifacts allowEmptyArchive: true, artifacts: '${WORKSPACE}/target/*.war'
		}
	}
}