def getIBMCloudAPI(String target){
	ibmCloudAPI = ""
	// only doing staging for CF currently
	switch(target) {
	  case "staging":
	    ibmCloudAPI = "api.stage1.ng.bluemix.net"
	    break
	  default:
	    ibmCloudAPI = "api.stage1.ng.bluemix.net"
	    break
	}
	return ibmCloudAPI
}

pipeline {
	agent any
	
	options {
		buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '20')
	}
	
	parameters({
  		choice choices: ['SELECT ONE...',  'ajlohr',  'kdsee',  'test3', 'staging'], description: 'Which deployment environment to deploy to. Right now its just used to append to the CF app name', name: 'DEPLOY_TARGET'
		
		string(name: 'SITE_GIT_URL', defaultValue: 'git@github.ibm.com:ICP4APPs/code-conjuring.git', description: 'Git ssh url to clone for the site repository')
		string(name: 'SITE_GIT_REVISION', defaultValue: 'master', description: 'Branch to clone for the site repository')
		
		credentials(name: 'IBM_CLOUD_CREDENTIALS', credentialType: 'com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl', defaultValue: '', description: 'IBM Cloud credentials to login via cf cli', required: true)
		
		string(name: 'IBM_CLOUD_ORG', defaultValue: 'ajlohr@us.ibm.com', description: 'IBM Cloud Organization to deploy to')
		
		string(name: 'IBM_CLOUD_SPACE', defaultValue: 'dev', description: 'IBM Cloud space (within the declared organziation) to deploy to')
		
		string(name: 'DOCS_GIT_URL', defaultValue: 'git@github.ibm.com:ICP4APPs/docs.git', description: 'Git ssh url to clone for the docs repository')
		string(name: 'DOCS_GIT_REVISION', defaultValue: 'master', description: 'Branch to clone for the docs repository')
		
		string(name: 'BLOGS_GIT_URL', defaultValue: 'git@github.ibm.com:ICP4APPs/blogs.git', description: 'Git ssh url to clone for the blogs repository')
		string(name: 'BLOGS_GIT_REVISION', defaultValue: 'master', description: 'Branch to clone for the docs repository')

		booleanParam(name: 'REBUILD_DOCKER_IMAGE', defaultValue: false, description: 'Rebuild the dockerfile.build docker image')
	})

	stages {
		stage ('Clean Workspace') {
			steps {
				cleanWs()
			}
		}
		
		stage ('Check Target') {
			steps {
				script{
					if( params.DEPLOY_TARGET.equals("SELECT ONE...") ) {
	   					error('FAIL. Please select a target to deploy to.')
					}
					
					if( params.IBM_CLOUD_CREDENTIALS.equals("") ) {
	   					error('FAIL. Please select an IBM Cloud credential to use for the cloud foundry deployment.')
					}
				}
			}
		}
		
		stage ('Checkout site Repository') {
			steps {
 				checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${SITE_GIT_REVISION}"]],
					doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory']],
					submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'd07dc7e8-4db5-4f8b-bc86-cab254d2858a', url: "${SITE_GIT_URL}"]]]
			}
		}
		
		stage ('Checkout Docs Repository') {
			steps {
 				checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${DOCS_GIT_REVISION}"]],
					doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'src/main/content/docs']],
					submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'd07dc7e8-4db5-4f8b-bc86-cab254d2858a', url: "${DOCS_GIT_URL}"]]]
			}
		}
		
		stage ('Checkout Blogs Repository') {
			steps {
 				checkout changelog: false, poll: false, scm: [$class: 'GitSCM', branches: [[name: "${BLOGS_GIT_REVISION}"]],
					doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'blogs']],
					submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'd07dc7e8-4db5-4f8b-bc86-cab254d2858a', url: "${BLOGS_GIT_URL}"]]]
				
				// blogs repository needs certain parts in different dirs
				sh 'rsync -av blogs/ src/main/content/ && rm -rf blogs'
			}
		}

		stage ('Rebuild Docker Image') {
			when {
				expression {
					return params.REBUILD_DOCKER_IMAGE
				}
			}
			steps {
				script {
					sh 'docker build -f Dockerfile.build -t codeconjuring .'
				}
			}
		}

		stage ('Build site') {
			steps {
				withDockerContainer(image: "codeconjuring") {
					sh '"${WORKSPACE}"/jenkins/build.sh'
				}
			}
		}
		
		stage ('Deploy site to Cloud Foundry') {
			steps {
				withCredentials([usernamePassword(credentialsId: '${IBM_CLOUD_CREDENTIALS}', passwordVariable: "IBM_CLOUD_PASSWORD", usernameVariable: "IBM_CLOUD_USER")]) {
					withDockerContainer(image: "codeconjuring", args: "-u root -e IBM_CLOUD_API=${getIBMCloudAPI(params.DEPLOY_TARGET)} -e IBM_CLOUD_SPACE=${params.IBM_CLOUD_SPACE} -e IBM_CLOUD_ORGANIZATION=${params.IBM_CLOUD_ORG}") {
						sh '"${WORKSPACE}"/.travis/cf-push.sh code-conjuring-${DEPLOY_TARGET}'
					}
				}
			}
		}
	}
}