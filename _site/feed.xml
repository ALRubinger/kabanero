<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-09T15:39:32-06:00</updated><id>http://localhost:4000/</id><title type="html">Open Liberty</title><subtitle>Open Liberty is the most flexible server runtime available to Earthâ€™s Java developers.
</subtitle><entry><title type="html">Bring your own JSF implementation to Open Liberty 17.0.0.4</title><link href="http://localhost:4000/news/2017/12/21/jsf-implementation-open-liberty-17004.html" rel="alternate" type="text/html" title="Bring your own JSF implementation to Open Liberty 17.0.0.4" /><published>2017-12-21T05:05:00-06:00</published><updated>2017-12-21T05:05:00-06:00</updated><id>http://localhost:4000/news/2017/12/21/jsf-implementation-open-liberty-17004</id><content type="html" xml:base="http://localhost:4000/news/2017/12/21/jsf-implementation-open-liberty-17004.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And, like a flash, a second release of Open Liberty (17.0.0.4) is upon us! Fancy bringing your own JSF implementation (Mojarra or MyFaces) to Open Liberty? You can now (and benefit from CDI) with the JSF Container 2.2 feature. Also, administrators can now configure concurrency policies for managed executors (Concurrency updates), and get distributed tracing with our implementation of opentracing.io.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Remember, if you&amp;#8217;re really keen, you can see what&amp;#8217;s being developed in Open Liberty in the &lt;a href=&quot;https://openliberty.io/downloads/&quot;&gt;nightly builds&lt;/a&gt;. Feel free to &lt;a href=&quot;https://openliberty.io/contribute/&quot;&gt;raise or even fix a bug&lt;/a&gt;. Fancy influencing the future direction of Open Liberty? Join the &lt;a href=&quot;https://groups.io/g/openliberty&quot;&gt;Open Liberty discussion group&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As we don&amp;#8217;t have a full set of documentation implemented for Open Liberty yet, the items below point (where relevant) to the official documentation for WebSphere Liberty (which is built on Open Liberty) so you can find out more about them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now download Open Liberty and Open Liberty Tools 17.0.0.4.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://openliberty.io/downloads/&quot;&gt;&lt;img src=&quot;/img/blog_btn_download-ol.svg&quot; alt=&quot;Download Open Liberty&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://stackoverflow.com/tags/open-liberty&quot;&gt;&lt;img src=&quot;/img/blog_btn_stack.svg&quot; alt=&quot;Ask a question on Stack Overflow&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, if you&amp;#8217;re using Maven, here are the coordinates:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.openliberty&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;openliberty-runtime&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;17.0.0.4&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;zip&lt;span class=&quot;tag&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or if you&amp;#8217;re using Docker:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;docker pull openliberty/open-liberty&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Open Liberty 17.0.0.4, you&amp;#8217;ll find :&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#jsfcontainer22&quot;&gt;JSF Container 2.2&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#concurrency&quot;&gt;Concurrency&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#opentracing&quot;&gt;Distributed tracing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;jsfcontainer22&quot;&gt;JSF Container 2.2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This feature makes it possible to bring your own JSF implementation (either Mojarra or MyFaces) for JSF 2.2 and take advantage of CDI integrations provided by the &lt;code&gt;cdi-1.2&lt;/code&gt; feature.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To try this, enable the &lt;code&gt;jsfContainer-2.2&lt;/code&gt; feature in your &lt;code&gt;server.xml&lt;/code&gt;, and package your own JSF API and implementation inside of your application and off you go!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;featureManager&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;feature&amp;gt;&lt;/span&gt;jsfContainer-2.2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/featureManager&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;concurrency&quot;&gt;Concurrency&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The administrator is now able to configure concurrency policies for managed executors for finer-grained control over concurrency constraints and other behavior.  This includes how many tasks are allowed to run in parallel, how many tasks can queue up, and what action to take when it is not possible to queue a task for execution, among other behaviors.  Different policies can be assigned for long-running tasks (identified by the &lt;code&gt;LONGRUNNING_HINT&lt;/code&gt; execution property) versus normal tasks.  Managed executors continue to be backed by the Liberty global thread pool and continue to benefit from Liberty&amp;#8217;s autonomic tuning, but it is now possible to impose these constraints to individual managed executors or groups of managed executors (multiple can share a single concurrency policy).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To try it out, configure one or more concurrency policies in the &lt;code&gt;server.xml&lt;/code&gt; file. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;concurrencyPolicy&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;max10&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;max&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;maxQueueSize&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;maxWaitForEnqueue&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;20s&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;startTimeout&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;1m&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Managed executors can be configured to use the concurrency policy as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;managedExecutorService&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;jndiName&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;concurrent/executor1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;concurrencyPolicyRef&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;max10&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;managedScheduledExecutorService&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;jndiName&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;concurrent/executor2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;concurrencyPolicyRef&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;max10&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more info, see the WebSphere Liberty Knowledge Center docs on &lt;a href=&quot;https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.liberty.autogen.base.doc/ae/rwlp_config_managedExecutorService.html&quot;&gt;Configuring the managed executor service&lt;/a&gt; and &lt;a href=&quot;https://www.ibm.com/support/knowledgecenter/SSEQTP_liberty/com.ibm.websphere.liberty.autogen.base.doc/ae/rwlp_config_managedScheduledExecutorService.html&quot;&gt;Configuring the managed scheduled executor service&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;opentracing&quot;&gt;Distributed tracing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;opentracing-1.0&lt;/code&gt; feature, together with a user provided &lt;code&gt;io.opentracing.Tracer&lt;/code&gt; implementation, enables JAX-RS applications to automatically create, propagate, and deliver distributed tracing information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In an environment with numerous services communicating with each other, distributed trace information provides a way to view the end-to-end flow of requests through multiple services. In many environments, there is a central trace collection service that accepts distributed tracing information from individual applications (one popular distributed tracing service is Zipkin). The central service correlates the distributed tracing information, and presents the end-to-end request flow information with a UI.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;a href=&quot;http://opentracing.io/&quot;&gt;opentracing.io&lt;/a&gt; project defines an API that applications can use to create, propagate, and deliver distributed trace information. An implementation of the opentracing.io API must be available to an application so that the application can deliver distributed trace information. The implementation of the opentracing.io API must match the implementation of the central trace collection service. For example, if the central trace collection service is Zipkin, then the opentracing.io implementation used by applications must perform distributed tracing functions in a way that is specific to Zipkin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Typically, the developer of each application in the environment must explicitly add code to the application in order for it to create, propagate, and deliver distributed tracing information. With the &lt;code&gt;opentracing-1.0&lt;/code&gt; feature of Liberty, developers do not need to add any code to their JAX-RS applications to participate in distributed tracing. The JAX-RS application will automatically create, propagate, and deliver distributed tracing information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each Liberty server in the environment must be configured with a user feature that provides an implementation of the opentracing.io API. The user feature must provide an implementation of the opentracing.io API that matches the central trace collection service that is used in the environment.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can find sample source code for &lt;a href=&quot;https://github.com/WASdev/sample.opentracing.zipkintracer&quot;&gt;a user feature that provides a Zipkin-specific opentracing.io API implementation&lt;/a&gt; on GitHub. Or you can download &lt;a href=&quot;http://central.maven.org/maven2/net/wasdev/wlp/tracer/liberty-opentracing-zipkintracer/1.0/liberty-opentracing-zipkintracer-1.0-sample.zip&quot;&gt;a built version of the user feature&lt;/a&gt; from Maven Central.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;ready-to-give-it-a-try&quot;&gt;Ready to give it a try?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://openliberty.io/downloads/&quot;&gt;&lt;img src=&quot;/img/blog_btn_download-ol.svg&quot; alt=&quot;Download Open Liberty&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://stackoverflow.com/tags/open-liberty&quot;&gt;&lt;img src=&quot;/img/blog_btn_stack.svg&quot; alt=&quot;Ask a question on Stack Overflow&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Laura Cowen</name></author></entry><entry><title type="html">Open Liberty Spring Boot Starter</title><link href="http://localhost:4000/news/2017/11/29/liberty-spring-boot.html" rel="alternate" type="text/html" title="Open Liberty Spring Boot Starter" /><published>2017-11-29T07:00:00-06:00</published><updated>2017-11-29T07:00:00-06:00</updated><id>http://localhost:4000/news/2017/11/29/liberty-spring-boot</id><content type="html" xml:base="http://localhost:4000/news/2017/11/29/liberty-spring-boot.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that the Open Liberty project is in full swing we are looking for more opportunities to enable developers to use Open Liberty in their own projects. It is very common for developers to create and deploy Spring applications on Open Liberty as a simple web application, but increasingly Spring developers are using Spring Boot as a faster, simpler way to create Spring applications. Spring Boot uses a set of Maven dependencies to build the applications, these dependencies are called starters and by default Spring Boot starters use Tomcat as the embedded web container. Additional starters for Jetty and Undertow are available to override Tomcat with another container implementation. So we thought it would be interesting if you could use an Open Liberty Spring Boot starter as an alternative, just like you can already do for Jetty and Undertow.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We have made available a Maven repository which can be used to try out the experimental Open Liberty Spring Boot starter &lt;a href=&quot;https://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/spring-starter-alpha1&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In order to use the Open Liberty Spring Boot starter there are a few small changes that need to be made to your Spring Boot project &lt;code&gt;pom.xml&lt;/code&gt; file (when using Maven) or to your &lt;code&gt;build.gradle&lt;/code&gt; file (when using Gradle).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;add-the-repository&quot;&gt;Add the repository&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The experimental Open Liberty Spring Boot starter is available from the repository &lt;a href=&quot;https://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/spring-starter-alpha1&quot;&gt;here&lt;/a&gt;.  This repository must be configured for your project. For Maven projects, you can do this by adding the following XML directly in your Spring Boot project&amp;#8217;s &lt;code&gt;pom.xml&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;repositories&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;repository&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;liberty-spring-boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;url&amp;gt;&lt;/span&gt;https://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/spring-starter-alpha1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/url&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/repository&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/repositories&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Gradle projects, you can do this by adding the following code directly in your Spring Boot project&amp;#8217;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;gradle&quot;&gt;repositories {
  mavenCentral()
  maven {
    url &amp;quot;https://public.dhe.ibm.com/ibmdl/export/pub/software/openliberty/runtime/spring-starter-alpha1&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;exclude-the-default-tomcat-starter&quot;&gt;Exclude the default Tomcat starter&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Many of the Spring Boot starters include the &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt; starter. For example, the &lt;code&gt;spring-boot-starter-web&lt;/code&gt; starter has a dependency on the &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt; starter. Add an exclusion for each starter that your Spring Boot application depends on that transitively pulls in &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt;. This excludes the &lt;code&gt;spring-boot-starter-tomcat&lt;/code&gt; from your application. For Maven projects, you can do this by adding the following XML:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- BEGIN EXCLUDE TOMCAT --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;exclusions&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;exclusion&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-tomcat&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/exclusion&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;/exclusions&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- END EXCLUDE TOMCAT --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Gradle projects, you can do this by adding the following code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;gradle&quot;&gt;dependencies {
  ...
  compile('org.springframework.boot:spring-boot-starter-web') {
    exclude module: &amp;quot;spring-boot-starter-tomcat&amp;quot;
  }
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;include-the-open-liberty-spring-boot-starter&quot;&gt;Include the Open Liberty Spring Boot starter&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The final step is to add a dependency on the &lt;code&gt;liberty-spring-boot-starter&lt;/code&gt; to use the Open Liberty web container. For Maven projects, you can do this by adding the following XML:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.openliberty.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;liberty-spring-boot-starter&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.5.0.M1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Gradle projects, you can do this by adding the following code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;dependencies {
  ...
  compile('io.openliberty.boot:liberty-spring-boot-starter:0.5.0.M1')
  ...
}&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;additional-open-liberty-components&quot;&gt;Additional Open Liberty components&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open Liberty has a modular runtime which allows developers to only enable the bits an application needs to get its job done. The &lt;code&gt;liberty-spring-boot-starter&lt;/code&gt; enables only the core Open Liberty runtime along with the web container which implements the Servlet 3.1 specification. Additional Open Liberty components may be enabled if your application requires more. The following additional Open Liberty features can be enabled:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;liberty-boot-jsp&lt;/code&gt;&lt;/strong&gt;: Enables JSP support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;liberty-boot-ssl&lt;/code&gt;&lt;/strong&gt;: Enables SSL support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;liberty-boot-websocket&lt;/code&gt;&lt;/strong&gt;: Enables WebSocket support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;liberty-boot-console&lt;/code&gt;&lt;/strong&gt;: Enables the OSGi console for debug purposes only.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can enable these features by including additional dependencies in your application. For example, if you need to configure &lt;code&gt;server.ssl.*&lt;/code&gt; settings for your application then you will need to include a dependency on the &lt;code&gt;liberty-boot-ssl&lt;/code&gt; artifact.  For Maven projects, you can do this by adding the following XML:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.openliberty.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;liberty-boot-ssl&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;0.5.0.M1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Gradle projects, you can do this by adding the following code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;gradle&quot;&gt;dependencies {
  ...
  compile('io.openliberty.boot:liberty-boot-ssl:0.5.0.M1')
  ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;open-liberty-specific-configuration&quot;&gt;Open Liberty specific configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There exist a small number of Liberty-specific configuration properties for configuring the container. The Liberty specific configuration properties are prefixed with &lt;code&gt;server.liberty.&lt;/code&gt;.  The following properties are available at this time:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;server.liberty.basedir&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;java.lang.String&lt;/code&gt; - Liberty base directory. If not specified a temporary directory is used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;server.liberty.bootstrap-properties&lt;/code&gt;&lt;/strong&gt;: &lt;code&gt;java.util.Map&amp;lt;java.lang.String,java.lang.String&amp;gt;&lt;/code&gt; - Set boot strap properties for Liberty. Can be used to set any of the Liberty configuration properties that typically would go in a Liberty server bootstrap.properties file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: Open Liberty will create a server folder under the folder specified by the configuration &lt;code&gt;server.liberty.basedir&lt;/code&gt;. This folder is used by Liberty as a persistent store while the application is running. By default the Liberty logs are stored under the folder &lt;code&gt;liberty-boot-0/wlp/usr/servers/defaultServer/logs/&lt;/code&gt;. When the application stops, the base directory used by Liberty is deleted.  If you need to view the Liberty logs after the application has ended then set the &lt;code&gt;server.liberty.basedir&lt;/code&gt; configuration property to a folder you want Liberty to use as the base directory.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The OSGi console will not be enabled by default when you include the &lt;code&gt;liberty-boot-console&lt;/code&gt; dependency. You must also configure a port which is used to telnet into the OSGi console. You can do this by specifying the bootstrap property &lt;code&gt;server.liberty.bootstrap-properties.osgi.console&lt;/code&gt;.  For example, you can set &lt;code&gt;server.liberty.bootstrap-properties.osgi.console=5678&lt;/code&gt; in your &lt;code&gt;application.properties&lt;/code&gt; file or you can also pass in the &lt;code&gt;osgi.console&lt;/code&gt; system property when launching your application with the &lt;code&gt;-Dosgi.console=5678&lt;/code&gt; JVM option.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Thomas Watson</name></author></entry><entry><title type="html">MicroProfile 1.2 and build tools updates in our first Open Liberty release</title><link href="http://localhost:4000/news/2017/10/26/microprofile-12-open-liberty-17003.html" rel="alternate" type="text/html" title="MicroProfile 1.2 and build tools updates in our first Open Liberty release" /><published>2017-10-26T13:05:00-05:00</published><updated>2017-10-26T13:05:00-05:00</updated><id>http://localhost:4000/news/2017/10/26/microprofile-12-open-liberty-17003</id><content type="html" xml:base="http://localhost:4000/news/2017/10/26/microprofile-12-open-liberty-17003.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Well, this is exciting! Our first proper release of Open Liberty and the Open Liberty Tools! In Open Liberty 17.0.0.3 is a full implementation of MicroProfile 1.2, some Liberty Gradle plugin updates, and some transport security updates. You might have noticed that the download actually went live some time ago but we were so caught up with &lt;a href=&quot;https://openliberty.io/news/2017/09/29/javaone-sessions-open-liberty-team.html&quot;&gt;JavaOne&lt;/a&gt; and other conferences (then recovering from all the excitement) that this post got&amp;#8230;&amp;#8203;ahem&amp;#8230;&amp;#8203;slightly overlooked. Anyway, it&amp;#8217;s here now&amp;#8230;&amp;#8203;read on!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now download Open Liberty and Open Liberty Tools 17.0.0.3.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://openliberty.io/downloads/&quot;&gt;&lt;img src=&quot;/img/blog_btn_download-ol.svg&quot; alt=&quot;Download Open Liberty&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://stackoverflow.com/tags/open-liberty&quot;&gt;&lt;img src=&quot;/img/blog_btn_stack.svg&quot; alt=&quot;Ask a question on Stack Overflow&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, if you&amp;#8217;re using Maven, here are the coordinates:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.openliberty&lt;span class=&quot;tag&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;openliberty-runtime&lt;span class=&quot;tag&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;17.0.0.3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;type&amp;gt;&lt;/span&gt;zip&lt;span class=&quot;tag&quot;&gt;&amp;lt;/type&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or if you&amp;#8217;re using Docker:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;docker pull openliberty/open-liberty&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In Open Liberty 17.0.0.3, you&amp;#8217;ll find our completed implementation of MicroProfile 1.2, as well as new and improved build tools:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MicroProfile 1.2 new features&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#mp-fault&quot;&gt;MicroProfile Fault Tolerance&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#mp-config&quot;&gt;MicroProfile Config API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#mp-metrics&quot;&gt;MicroProfile Metrics&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#mp-health&quot;&gt;MicroProfile Health&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#mp-jwt&quot;&gt;MicroProfile JSON Web Token&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build tools updates&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#gradle&quot;&gt;Liberty Gradle plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Non-API features&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;#transportsecurity&quot;&gt;Transport security&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;microprofile-1-2&quot;&gt;MicroProfile 1.2&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Open Liberty already implemented Eclipse MicroProfile 1.0 with JAX-RS 2.0, CDI 1.2, and JSON-P 1.0. That was easy. I mean, pity the Java EE application server that can&amp;#8217;t do that. Now we&amp;#8217;ve completed the MicroProfile 1.2 set with all these other MicroProfile features&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable all the MicroProfile 1.2 features, add this definition to your &lt;code&gt;server.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;featureManager&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;feature&amp;gt;&lt;/span&gt;microProfile-1.2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/featureManager&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alternatively, you can add the individual features as described below.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mp-fault&quot;&gt;MicroProfile Fault Tolerance&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The increasing size of applications, newer architectures that are as likely to 'scale out' as to 'scale up', and the rising popularity of microservice architectures, it is increasingly important to build fault tolerance into our system architecture.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fault tolerance can be improved using a number of well-tested approaches that handle failure:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;TimeOut&lt;/strong&gt;: Limit the amount of time we are prepared to wait for a result&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;RetryPolicy&lt;/strong&gt;: Control how much we are prepared to re-submit a request&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fallback&lt;/strong&gt;: Specify what should we do when the primary service cannot be used successfully&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bulkhead&lt;/strong&gt;: If calls to a service are slow (perhaps it is overloaded or we are timing out), specify what proportion of our local resources we are prepared to get involved in the traffic jam&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CircuitBreaker&lt;/strong&gt;: When a service is proving unreliable, for example timing out, we can choose to 'fail fast'  by automatically failing calls to it under control&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the Microprofile Fault Tolerance specification, we can control all these aspects with easy-to-use Java annotations at a method or class level that is independent of any particular vendor or implementation library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To add just the Fault Tolerance feature, update your &lt;code&gt;server.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;featureManager&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;feature&amp;gt;&lt;/span&gt;mpFaultTolerance-1.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/featureManager&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Find out more about the &lt;a href=&quot;https://github.com/eclipse/microprofile-fault-tolerance&quot;&gt;Fault Tolerance feature in GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mp-config&quot;&gt;MicroProfile Config API 1.1&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The MicroProfile Configuration specification provides a single way to view and access multiple sources of configuration, such as properties files and environment variables, including bootstrap.properties, user-level properties files, registered Java classes that implement the ConfigSource API, and the Java System properties.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When your applications are deployed as microservices, having a single place to update the configuration data of multiple microservices is useful for several reasons. Building systems as collections of independent microservices increases the number of services that need to be managed. Different stages in the pipeline often use different configuration sources for a single piece of configuration data and a given component needs updating as it moves through the pipeline. Containerisation of services means that even while a component is â€˜liveâ€™ in production, the environment it is running in might be more dynamic and the components need configuration updates without being restarted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Config API allows for a consistent means to access configuration data from pluggable configuration sources. Configuration properties can be injected using Java CDI in a form that is easy to consume. Data values and sources can vary across the devOps pipeline without code change or repackaging, and dynamic and fully typed data is catered for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To add just the Config API feature, update your &lt;code&gt;server.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;featureManager&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;feature&amp;gt;&lt;/span&gt;mpConfig-1.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/featureManager&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Find out more about the &lt;a href=&quot;https://github.com/eclipse/microprofile-config&quot;&gt;Config API feature in GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mp-metrics&quot;&gt;MicroProfile Metrics&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MicroProfile Metrics provides a way for developers to instrument their microservices and applications that will be portable across all MicroProfile Metrics implementations.  The API is similar to the Dropwizard Metrics API that many developers are already familiar with. Using MicroProfile Metrics avoids the need to find and include third-party metrics libraries and integrate those libraries with Liberty.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For operations teams, MicroProfile Metrics provides a consistent way to access metrics from their Liberty servers through a simple REST interface.  The REST API can return output compatible with Prometheus or with any monitoring tools that can consume JSON.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Developers&lt;/strong&gt;: To add just the Metrics feature, update your &lt;code&gt;server.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;featureManager&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;feature&amp;gt;&lt;/span&gt;mpMetrics-1.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/featureManager&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Ops&lt;/strong&gt;: To enable the &lt;code&gt;/metrics&lt;/code&gt; REST interface, add the following definition to your &lt;code&gt;server.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;featureManager&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;feature&amp;gt;&lt;/span&gt;mpMetrics-1.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/featureManager&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;quickStartSecurity&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;userName&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;theUser&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;userPassword&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;thePassword&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;keyStore&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;defaultKeyStore&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;password&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Liberty&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Then verify that things are set up correctly by hitting &lt;code&gt;&lt;a href=&quot;https://yourserver:9443/metrics&quot; class=&quot;bare&quot;&gt;https://yourserver:9443/metrics&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Find out more about the &lt;a href=&quot;https://github.com/eclipse/microprofile-metrics&quot;&gt;Metrics feature in GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mp-health&quot;&gt;MicroProfile Health&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MicroProfile Health defines an API for providing health check procedures in a microservice and a runtime environment for invoking installed health checks and aggregating an overall response.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;MicroProfile Health specifies a standard health check API that works across any runtime supporting MicroProfile 1.2.  The feature provides a default response even when the installed microservice does not implement any health checks.  It provides a standard health check URL, allowing for a consistent way to configure service monitors (e.g., Kubernetes liveness checks).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add the &lt;code&gt;mpHealth-1.0&lt;/code&gt; feature to the server configuration and add zero or more health checks to the microservice.  A &lt;code&gt;/health&lt;/code&gt; context is provided by the server for invoking the health checks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To add just the Health feature, update your &lt;code&gt;server.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;featureManager&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;feature&amp;gt;&lt;/span&gt;mpHealth-1.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/featureManager&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Find out more about the &lt;a href=&quot;https://github.com/eclipse/microprofile-health&quot;&gt;Health feature in GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;mp-jwt&quot;&gt;MicroProfile JSON Web Token&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the MicroProfile JSON Web Token feature, an administrator can configure Liberty to perform authentication and authorization based on incoming JWT without requiring a user registry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An application developer can write a JAX-RS application to programmatically authorize resource access using CDI injection or the standard JAX-RS container API in an interoperable way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To add just the MicroProfile JSON Web Token feature, update your &lt;code&gt;server.xml&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;featureManager&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;tag&quot;&gt;&amp;lt;feature&amp;gt;&lt;/span&gt;mpJwt-1.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/feature&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/featureManager&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Find out more about the &lt;a href=&quot;https://github.com/MicroProfileJWT/microprofile-jwt-auth&quot;&gt;MicroProfile JSON Web Token feature in GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;build-tools-updates&quot;&gt;Build tools updates&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gradle&quot;&gt;Liberty Gradle plugin&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Liberty Gradle plugin has many improvements to help you install and manage your Liberty server. These tasks can be used to test your web application on a Liberty server more easily and for packaging your servers.  The plugin update includes enhancements to the following tasks:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;installLiberty&lt;/code&gt; task:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add support to install using Maven repository coordinates&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Provide Liberty license upgrade&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;installFeature&lt;/code&gt; task:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Support installing from a local folder&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;libertyStart&lt;/code&gt; task:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add timeout test support&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add application start verification&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;new &lt;code&gt;installApps&lt;/code&gt; task:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Improved application installation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support multiple WAR file tasks for installation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loose application support to make debugging faster&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;libertyCreate&lt;/code&gt; task:&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Server configuration creation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy &lt;code&gt;server.xml&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy &lt;code&gt;server.env&lt;/code&gt;, &lt;code&gt;bootstrap.properties&lt;/code&gt;, &lt;code&gt;jvm.options&lt;/code&gt; files&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create &lt;code&gt;bootstrap.properties&lt;/code&gt; and &lt;code&gt;jvm.options&lt;/code&gt; from inline configuration&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Copy a folder of configuration&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;libertyRun&lt;/code&gt; task fixes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;new &lt;code&gt;compileJSP&lt;/code&gt; task&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In addition there are:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Documentation improvements&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhancements to the Liberty Gradle lifecycle with task dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Liberty Gradle plugin is used with the Gradle WAR plugin to install project WAR files and loose applications to a Liberty Server. For more details, see &lt;a href=&quot;https://github.com/WASdev/ci.gradle/blob/master/README.md&quot;&gt;the Liberty Gradle plugin documentation&lt;/a&gt; in GitHub.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;non-api-features&quot;&gt;Non-API features&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;transportsecurity&quot;&gt;Transport Security&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Transport Security feature provides dynamic SSL filters. This enables administrators to configure SSL configuration to be used for outbound connections based on the host (or host and port) of the destination.  You can configure the SSL configuration without having to use direct references in individual components.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To enable an outbound SSL filter in the &lt;code&gt;server.xml&lt;/code&gt;, add an element called &lt;code&gt;&amp;lt;outboundConnection /&amp;gt;&lt;/code&gt;.  The &lt;code&gt;&amp;lt;outboundConnection /&amp;gt;&lt;/code&gt; element is nested in the &lt;code&gt;&amp;lt;ssl /&amp;gt;&lt;/code&gt; element.   The &lt;code&gt;&amp;lt;outboundConnection /&amp;gt;&lt;/code&gt; element contains two attributes: &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;. The &lt;code&gt;host&lt;/code&gt; attribute is required; the &lt;code&gt;port&lt;/code&gt; attribute is optional.  A missing &lt;code&gt;port&lt;/code&gt; attribute means any port on the configured host. When configured, and an outbound SSL connection is made, the connection can be matched to an SSL configuration that is assigned to the destination host, or host and port, that is specified in the &lt;code&gt;&amp;lt;outboundConnection /&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the following example, the outbound SSL connection going to a machine called &lt;code&gt;testMachine&lt;/code&gt; and port &lt;code&gt;9443&lt;/code&gt; uses an SSL context created with information from the &lt;code&gt;&amp;lt;ssl /&amp;gt;&lt;/code&gt; element called &lt;code&gt;customSSLSettings&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;ssl&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;customSSLSettings&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;keyStoreRef&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;customKeyStore&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;trustStoreRef&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;customTrustStore&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;sslProtocol&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;TLSv1.2&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;clientAuthenticationSupported&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;outboundConnection&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;host&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;testHostMachine&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;port&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;9443&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/ssl&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://openliberty.io/downloads/&quot;&gt;&lt;img src=&quot;/img/blog_btn_download-ol.svg&quot; alt=&quot;Download Open Liberty&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://stackoverflow.com/tags/open-liberty&quot;&gt;&lt;img src=&quot;/img/blog_btn_stack.svg&quot; alt=&quot;Ask a question on Stack Overflow&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Laura Cowen</name></author></entry><entry><title type="html">JavaOne sessions from the Open Liberty team</title><link href="http://localhost:4000/news/2017/09/29/javaone-sessions-open-liberty-team.html" rel="alternate" type="text/html" title="JavaOne sessions from the Open Liberty team" /><published>2017-09-29T11:30:00-05:00</published><updated>2017-09-29T11:30:00-05:00</updated><id>http://localhost:4000/news/2017/09/29/javaone-sessions-open-liberty-team</id><content type="html" xml:base="http://localhost:4000/news/2017/09/29/javaone-sessions-open-liberty-team.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;Update 2017-10-13&lt;/strong&gt;: Now with links to JavaOne session videos, where available.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Wow, how time has flown! Itâ€™s been just two weeks since &lt;a href=&quot;https://openliberty.io/news/2017/09/19/open-sourcing-liberty.html&quot;&gt;Open Liberty went live&lt;/a&gt; and we totally forgot to mention weâ€™ll be at &lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt; next week. Thereâ€™ll be a bunch of JavaOne sessions given by Liberty developers (and emeritus developers) throughout the week. If you want to talk to us, come to one of our sessions, seek us out at the IBM booth, or find us at one of the many evening events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nottycode&quot;&gt;Alasdair Nottingham&lt;/a&gt; &lt;code&gt;#OpenLiberty&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/kwsutter&quot;&gt;Kevin Sutter&lt;/a&gt; &lt;code&gt;#MicroProfile #JavaEE&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ian_\_robinson&quot;&gt;Ian Robinson&lt;/a&gt; &lt;code&gt;#OpenLiberty&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/gcharters&quot;&gt;Graham Charters&lt;/a&gt; &lt;code&gt;#OpenLiberty #OSGi&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/jduimovich&quot;&gt;John Duimovich&lt;/a&gt; &lt;code&gt;#Java&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/emilyfhjiang&quot;&gt;Emily Jiang&lt;/a&gt; &lt;code&gt;#MicroProfile #CDI&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/geoffpirie&quot;&gt;Geoff Pirie&lt;/a&gt; &lt;code&gt;#OpenLiberty&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/megmulsy&quot;&gt;Megan Mulholland&lt;/a&gt; &lt;code&gt;#UX #visualdesign #branding&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/ebullientworks&quot;&gt;Erin Schnabel&lt;/a&gt; (emeritus) &lt;code&gt;#OpenLiberty #microservices&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/KateStanley91&quot;&gt;Kate Stanley&lt;/a&gt; (emeritus)  &lt;code&gt;#OpenLiberty #microservices&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/holly_cummins&quot;&gt;Holly Cummins&lt;/a&gt; (emeritus)  &lt;code&gt;#OpenLiberty #IoT #JavaChampion&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;javaone-sessions-featuring-liberty-developers&quot;&gt;JavaOne sessions featuring Liberty developers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, where will you find Liberty developers?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;monday&quot;&gt;Monday&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=con8030&amp;amp;showEnrolled=false&quot;&gt;Opening up Java EE: Panel discussion with Oracle, IBM, Red Hat, and the Eclipse Foundation&lt;/a&gt;&lt;br&gt;
Ian Robinson - 4.30pm&lt;br&gt;
&lt;a href=&quot;https://youtu.be/BkJt7IjL3XM&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=con7714&amp;amp;showEnrolled=false&quot;&gt;WebSphere Liberty meets open source&lt;/a&gt;&lt;br&gt;
Alasdair Nottingham, Ian Robinson â€“ 5.30pm&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tuesday&quot;&gt;Tuesday&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=con1896&amp;amp;showEnrolled=false&quot;&gt;Cloud-native Java done right&lt;/a&gt;&lt;br&gt;
Alasdair Nottingham, Kevin Sutter â€“ 3pm&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;wednesday&quot;&gt;Wednesday&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=con1825&amp;amp;showEnrolled=false&quot;&gt;Panel: Accelerating the adoption of Java EE 8 with MicroProfile&lt;/a&gt;&lt;br&gt;
Kevin Sutter â€“ 11.45am&lt;br&gt;
&lt;a href=&quot;https://youtu.be/BhMLxwf0AMM&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=con2417&amp;amp;showEnrolled=false&quot;&gt;Java versus Node.js versus Swift in the Language Performance Olympics&lt;/a&gt;&lt;br&gt;
Graham Charters â€“ 1.45pm&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=con3730&amp;amp;showEnrolled=false&quot;&gt;Jump-start your microservices development with Java EE&lt;/a&gt;&lt;br&gt;
Kate Stanley, Graham Charters â€“ 1.45pm&lt;br&gt;
&lt;a href=&quot;https://youtu.be/1HdtILoL6O4&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;thursday&quot;&gt;Thursday&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=%22java%20community%20keynote%20reloaded%22&amp;amp;showEnrolled=false&quot;&gt;Java, open technologies, and cloud-native development: The next generation of innovation emerges&lt;/a&gt;&lt;br&gt;
John Duimovich, Ian Robinson - 9am&lt;br&gt;
&lt;a href=&quot;http://video.oracle.com/detail/videos/most-recent/video/5600375079001/ibm-javaone-keynote-10-5-2017?autoStart=true&quot;&gt;video&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;some-javaone-sessions-featuring-former-liberty-developers&quot;&gt;Some JavaOne sessions featuring former Liberty developers&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And if that isnâ€™t enough for you, some of these sessions might be of interest to you:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=HOL7896&amp;amp;showEnrolled=false&quot;&gt;Introduction to Reactive Systems&lt;/a&gt;&lt;br&gt;
Erin Schnabel â€“ 4.30pm&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=con1756&amp;amp;showEnrolled=false&quot;&gt;Choosing a NoSQL API and database to avoid tombstones and dragons in Game On!&lt;/a&gt;&lt;br&gt;
Erin Schnabel â€“ Wednesday 12.45pm&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=con2930&amp;amp;showEnrolled=false&quot;&gt;Thinking strategically about IoT&lt;/a&gt;&lt;br&gt;
Holly Cummins â€“ Wednesday 4.30pm&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=con3222&amp;amp;showEnrolled=false&quot;&gt;So You Say You Want a Chatbot Revolution&lt;/a&gt;&lt;br&gt;
Holly Cummins â€“ Thursday 1.45pm&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;talk-to-them-on-the-booths-and-get-free-stuff&quot;&gt;Talk to them on the booths and get free stuff&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you drop by the IBM Open Liberty, IBM MicroProfile, and IBM Game On! booths, several current and former Liberty developers will be hanging out there. Come and chat to them. Theyâ€™d love to meet you! And they might even have free t-shirts and other goodies to shareâ€¦&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Laura Cowen</name></author></entry><entry><title type="html">Open Sourcing Liberty</title><link href="http://localhost:4000/news/2017/09/19/open-sourcing-liberty.html" rel="alternate" type="text/html" title="Open Sourcing Liberty" /><published>2017-09-19T08:00:00-05:00</published><updated>2017-09-19T08:00:00-05:00</updated><id>http://localhost:4000/news/2017/09/19/open-sourcing-liberty</id><content type="html" xml:base="http://localhost:4000/news/2017/09/19/open-sourcing-liberty.html">&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Iâ€™d like to take this opportunity to welcome you to the Open Liberty project, an open source runtime for Java microservices.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In 2012, IBM released WebSphere Liberty, an application server designed for the cloud. It was small, lightweight, and designed with modern application development in mind. It wasnâ€™t perfect, it didnâ€™t have everything people wanted, but it was a great start. Since then we have expanded Liberty to make it fully Java EE 7 certified, and we have deployed it to every major developer platform, including Docker, Kubernetes, and Cloud Foundry. Liberty has been deployed successfully at a large number of our customers and continues to be rolled out. However, in this industry nothing stays still and the bar is constantly moving.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a-modern-runtime-for-java-microservices&quot;&gt;A modern runtime for Java microservices&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Over the last year we have had a lot of discussions with developers about how Liberty needs to evolve in order to meet developers' expectations, and to continue innovating to support modern application needs. Of course, what â€˜modernâ€™ means in this context is always changing and microservices are redefining how software is developed. This is why we have been so active in the &lt;a href=&quot;http://microprofile.io&quot;&gt;Eclipse MicroProfile&lt;/a&gt; project which is helping to create common APIs for writing cloud-native microservices in Java.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It isnâ€™t just about what we do, though, it is also how we do it. Talking with developers we have often been asked if we have any plans to open source Liberty. Well the answer is yes. The open source core of WebSphere Liberty is now available on &lt;a href=&quot;https://github.com/openliberty/open-liberty&quot;&gt;GitHub&lt;/a&gt; under the EPL v1 license. You can find out more and download the latest nightly builds on the new &lt;a href=&quot;http://www.openliberty.io&quot;&gt;OpenLiberty.io&lt;/a&gt; website. We have a new mailing list on &lt;a href=&quot;https://groups.io/g/openliberty&quot;&gt;Groups.io&lt;/a&gt; for discussion and we will also be answering questions on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/open-liberty&quot;&gt;Stack Overflow&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Open Liberty project is a fully compatible Java EE 7 application server and, of course, it includes the latest &lt;a href=&quot;http://microprofile.io&quot;&gt;Eclipse MicroProfile&lt;/a&gt; APIs too. It forms the core of the commercial WebSphere Liberty product which will be built from the Open Liberty source code with no changes, so an application that runs on Open Liberty will run unchanged on WebSphere Liberty. And if you need support, you can get that through WebSphere Liberty too.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;get-involved&quot;&gt;Get involved&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Taking a successful software project and transitioning to open source is not easy. While many of us in the WebSphere development team have been regular contributors to open source projects this is a massive shift in how we do things and our development culture. We will be learning as we go, with the support of experienced open source developers in IBM, as well as the wider open source community. In the spirit of openness, we will share what we learn as we go. We know that there will be times when we will get things wrong, but we think Liberty is the best and most flexible runtime for Java microservices and are delighted to be open sourcing it today. If you are coming to &lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt; please come to the IBM booth to talk to us, or come to my &lt;a href=&quot;https://events.rainfocus.com/catalog/oracle/oow17/catalogjavaone17?search=CON7714&quot;&gt;session&lt;/a&gt; on Monday at 5:30pm in Moscone West, Room 2006. We invite anyone who wants to make it even better to get involved to help us make the Open Liberty project a success as well.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content><author><name>Alasdair Nottingham</name></author></entry></feed>